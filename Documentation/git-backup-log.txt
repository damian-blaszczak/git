git-backup-log(1)
=================

NAME
----
git-backup-log - Manage backup log files


SYNOPSIS
--------
[verse]
'git backup-log' [--id=<id> | --path=<path>] log [<rev-options>] [[--] <path>...]
'git backup-log' [--id=<id> | --path=<path>] cat [--before] [--hash] <change-id> <path>
'git backup-log' [--id=<id> | --path=<path>] diff [<diff-options>] <change-id>
'git backup-log' [--id=<id> | --path=<path>] prune [--expire=<time>]
'git backup-log' [--id=<id> | --path=<path>] update <path> <old-hash> <new-hash>

DESCRIPTION
-----------
Backup log records changes of certain files in the object database so
that if some file is overwritten by accident, you could still get the
original content back.

Backup log is enabled by setting core.backupLog to true and the
following commands will save backups:

- linkgit:git-add[1] keeps all index changes. File removal is not
  recorded.
- linkgit:git-commit[1] keep all index changes in `-a` or partial
  commit mode.
- linkgit:git-apply[1] and linkgit:git-update-index[1] will keep
  changes if `--keep-backup` is specified
- Changes of `$GIT_DIR/config` made by `git config --edit` are kept.
- Deleted reflogs are kept. References from this deleted reflog will
  not be kept at the next garbage collection though. This is mostly
  meant to immediately undo an accidental branch deletion.
- linkgit:git-checkout[1] when switching branches and
  linkgit:git-merge[1] will make a backup before overwriting
  ignored files.
- linkgit:git-checkout[1] with `--force`, linkgit:git-reset[1] with
  `--hard` or linkgit:git-am[1] and linkgit:git-rebase[1] with
  `--skip` or `--abort` will make a backup before overwriting non
  up-to-date files.
- FIXME perhaps `git checkout <paths>` only makes backups on
  "precious" paths only?

Backups are split in three groups, changes related in the index, in
working directory or in $GIT_DIR. These can be selected with `--id`
parameter as `index`, `worktree` and `gitdir` respectively.
Alternatively file path of these are `$GIT_DIR/index.bkl`,
`$GIT_DIR/worktree.bkl` and `$GIT_DIR/common/gitdir.bkl` which could
be specified with `--path`

This command is split into subcommands:

update::
	Add a new change associated with `<path>` from `<old-hash>` to
	`<new-hash>` to the selected backup log file. `<path>` must be
	normalized.

log::
	View the selected backup log (optionally filtered by pathspec).
	By default, the diff of the change is shown.

cat::
	Output the file content or their object name of a specific
	change.

diff::
	Output the diff of a specific change.

prune::
	Prune the backup log, delete updates older than a specific
	time or invalid entries. The actual backup content is still in
	the object database and may need to be pruned separatedly.

OPTIONS
-------

--id=<id>::
	The name of the the backup log file. Supported names are
	`index`, `worktree` and `gitdir`.

--path=<path>::
	The path of a backup log file.

--before::
	Show the version before the change instead. This is most
	useful when the change is a file deletion.

--hash::
	Show the object name instead of content.

--expire=<time>::
	The cutoff time for pruning backup log. The default is three
	months ago.

<path>::
	The path of the file where the change is made.

<old-hash>::
	The blob hash of the content before the change.

<old-hash>::
	The blob hash of the content after the change.

GIT
---
Part of the linkgit:git[1] suite
